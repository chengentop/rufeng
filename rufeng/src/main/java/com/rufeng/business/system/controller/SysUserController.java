package com.rufeng.business.system.controller;


import com.rufeng.business.system.domain.po.SysRole;
import com.rufeng.business.system.domain.po.SysUser;
import com.rufeng.business.system.service.ISysPostService;
import com.rufeng.business.system.service.ISysRoleService;
import com.rufeng.business.system.service.ISysUserService;
import com.rufeng.core.framework.aspectj.lang.annotation.Log;
import com.rufeng.core.framework.aspectj.lang.enums.BusinessType;
import com.rufeng.core.framework.web.ResultData;
import com.rufeng.core.framework.db.Pager;
import com.rufeng.core.utils.SecurityUtils;
import com.rufeng.core.utils.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.List;
import java.util.stream.Collectors;


/**
 * 用户信息控制器
 *
 * @version v1.0.0
 * @since jdk1.8+
 */
@RestController
@RequestMapping("/system/sysuser")
public class SysUserController {
    private Logger log = LoggerFactory.getLogger(SysUserController.class);

    @Autowired
    private ISysUserService sysuserService;

    @Autowired
    private ISysRoleService sysRoleService;

    @Autowired
    private ISysPostService sysPostService;

    /**
     * 获取用户信息
     *
     * @param user_id 用户ID
     * @return ResultData
     */
    @Log(title = "添加用户信息", businessType = BusinessType.SELECT)
    @RequestMapping(value = "/get/{id}", method = {RequestMethod.GET, RequestMethod.POST})
    public ResultData get(String user_id) throws Exception {
        log.debug("###开始查询用户信息， user_id=[{}].", user_id);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        return sysuserService.get(user_id);
    }

    /**
     * 查询用户信息
     *
     * @param sysuser 用户信息对象
     * @return ResultData
     */
    @RequestMapping(value = "/list", method = {RequestMethod.GET})
    public ResultData find(SysUser sysuser) throws Exception {
        log.debug("###开始根据条件{}查询用户信息", sysuser);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        return sysuserService.find(sysuser);
    }


    /**
     * 分页查询用户信息
     *
     * @param page    分页对象
     * @param sysuser 用户信息对象
     * @return ResultData
     */
    @RequestMapping(value = "/list-by-page", method = {RequestMethod.GET})
    public ResultData listPager(SysUser sysuser, Pager page) throws Exception {
        log.debug("###开始根据条件{}分页查询用户信息", sysuser);
        return sysuserService.listPager(sysuser, page);
    }

    /**
     * 添加用户信息
     *
     * @param sysuser 用户信息对象
     * @return ResultData
     */
    @Log(title = "添加用户信息", businessType = BusinessType.INSERT)
    @RequestMapping(value = "/add", method = {RequestMethod.POST})
    public ResultData add(@RequestBody SysUser sysuser) throws Exception {
        log.debug("###开始查找添加用户信息， [{}]", sysuser);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        return sysuserService.add(sysuser);
    }

    /**
     * 更新用户信息
     *
     * @param sysuser 用户信息对象
     * @return ResultData
     */
    @Log(title = "更新用户信息", businessType = BusinessType.UPDATE)
    @RequestMapping(value = "/update", method = {RequestMethod.POST})
    public ResultData update(@RequestBody SysUser sysuser) throws Exception {
        log.debug("###开始修改用户信息， [{}]", sysuser);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        return sysuserService.update(sysuser);
    }

    /**
     * 删除用户信息
     *
     * @param user_id 用户ID
     * @return ResultData
     */
    @Log(title = "删除用户信息", businessType = BusinessType.DELETE)
    @RequestMapping(value = "/delete/{user_id}", method = {RequestMethod.POST})
    public ResultData delete(@PathVariable String user_id) throws Exception {
        log.debug("###开始删除用户信息对象，user_id={}.", user_id);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        return sysuserService.delete(user_id);
    }

    /**
     * 根据用户编号获取详细信息
     */
    @Log(title = "根据用户编号获取详细信息", businessType = BusinessType.OTHER)
    @RequestMapping(value = {"/", "/{userId}"}, method = RequestMethod.GET)
    public ResultData getInfo(@PathVariable(value = "userId", required = false) Long userId) throws Exception {
        ResultData data = ResultData.init();
        List<SysRole> roles = sysRoleService.selectRoleAll();
        data.setData("roles", SysUser.isAdmin(userId) ? roles :
                roles.stream().filter(r -> !r.isAdmin()).collect(Collectors.toList()));
        data.setData("posts", sysPostService.selectPostAll());
        if (StringUtils.isNotNull(userId)) {
            data.setData("data", sysuserService.selectUserById(userId));
            data.setData("postIds", sysPostService.selectPostListByUserId(userId));
            data.setData("roleIds", sysRoleService.selectRoleListByUserId(userId));
        }
        return data;
    }

    /**
     * 重置用户密码
     */
    @Log(title = "重置用户密码", businessType = BusinessType.UPDATE)
    @RequestMapping(value = "/resetPwd", method = RequestMethod.PUT)
    public ResultData resetPwd(@RequestBody SysUser user) {
        sysuserService.checkUserAllowed(user);
        user.setPassword(SecurityUtils.encryptPassword(user.getPassword()));
        user.setUpdateby(SecurityUtils.getUsername());
        return sysuserService.resetPwd(user);
    }

    /**
     * 修改用户状态
     */
    @Log(title = "修改用户状态", businessType = BusinessType.UPDATE)
    @RequestMapping(value = "/changeStatus", method = {RequestMethod.POST})
    public ResultData changeStatus(@RequestBody SysUser user) {
        log.debug("###开始修改用户状态，user={}.", user);
        sysuserService.checkUserAllowed(user);
        user.setUpdateby(SecurityUtils.getUsername());
        return sysuserService.updateUserStatus(user);
    }

    /**
     * 获取用户头像
     */
    @RequestMapping(value = "/get-avatar/{userid}", method = {RequestMethod.GET})
    public void userAvatar(HttpServletRequest request, @PathVariable Long userid, HttpServletResponse reponse) {
        sysuserService.userAvatar(userid, reponse);
    }
}