package com.rufeng.business.system.service.impl;


import java.util.*;
import java.util.stream.Collectors;

import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import com.rufeng.business.system.domain.po.SysUser;
import com.rufeng.business.system.domain.vo.MetaVo;
import com.rufeng.business.system.domain.vo.RouterVo;
import com.rufeng.core.framework.common.constant.UserConstants;
import com.rufeng.core.framework.web.domain.TreeSelect;
import com.rufeng.core.utils.SecurityUtils;
import com.rufeng.core.utils.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;

import com.rufeng.core.framework.db.Pager;
import com.rufeng.core.framework.web.ResultData;
import com.rufeng.business.system.service.ISysMenuService;
import com.rufeng.business.system.mapper.ISysMenuDao;
import com.rufeng.business.system.domain.po.SysMenu;


/**
 * 菜单权限 服务接口实现
 *
 * @version v1.0.0
 * @since jdk1.8+
 */
@Service
public class SysMenuServiceImpl extends ServiceImpl<ISysMenuDao, SysMenu> implements ISysMenuService {
    private Logger log = LoggerFactory.getLogger(SysMenuServiceImpl.class);

    @Autowired
    private ISysMenuDao sysmenuDao;

    @Override
    public ResultData get(String menuid) throws Exception {
        log.debug("###[服务] 开始查询菜单权限 menuid=[{}]. ", menuid);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();
        SysMenu sysmenu = sysmenuDao.selectById(menuid);
        resData.setData("sysmenu", sysmenu);
        log.info("###[服务] 完成查询菜单权限 ResultData=[{}]", resData);
        return resData;
    }

    @Override
    public ResultData list(SysMenu sysmenu) throws Exception {
        log.debug("###[服务] 开始根据条件{}查询菜单权限", sysmenu);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();
        QueryWrapper<SysMenu> sysmenuWrapper = new QueryWrapper<>();
        sysmenuWrapper.setEntity(sysmenu);
        List<SysMenu> sysmenus = sysmenuDao.selectList(sysmenuWrapper);
        resData.setData("sysmenus", sysmenus);
        log.info("###[服务] 完成查询菜单权限 ResultData=[{}]", resData);
        return resData;
    }

    @Override
    public ResultData listPager(SysMenu sysmenu, Pager page) throws Exception {
        log.debug("###[服务] 开始根据条件{}分页查询菜单权限", sysmenu);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();
        Page<SysMenu> pageParam = new Page<>(page.getCurrentPage(), page.getTotalSize()); // 当前页码，每页条数
        QueryWrapper<SysMenu> sysmenuWrapper = new QueryWrapper<>();
        sysmenuWrapper.setEntity(sysmenu);
        IPage<SysMenu> pu = sysmenuDao.selectPage(pageParam, sysmenuWrapper);
        resData.setData("data", pu);

        log.info("###[服务] 完成分页查询菜单权限 resData=[{}]", resData);
        return resData;
    }

    @Override
    public ResultData add(SysMenu sysmenu) throws Exception {
        log.debug("###[服务] 开始添加新菜单权限, {}", sysmenu);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();
        int inserted = sysmenuDao.insert(sysmenu);
        resData.setData("inserted", inserted);
        log.info("###[服务] 完成添加新菜单权限，ResultData=[{}]", resData);
        return resData;
    }

    @Override
    public ResultData update(SysMenu sysmenu) throws Exception {
        log.debug("###[服务] 开始根据条件{}修改菜单权限,", sysmenu);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();
        int updated = sysmenuDao.updateById(sysmenu);
        resData.setData("updated", updated);
        log.info("###[服务] 完成修改菜单权限，ResultData=[{}]", resData);
        return resData;
    }

    @Override
    public ResultData delete(String menuid) throws Exception {
        log.debug("###[服务] 开始根据条件{}删除菜单权限,", menuid);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();
        SysMenu sysmenu = new SysMenu();
        sysmenu.setMenuid(Long.valueOf(menuid));
        int deleted = sysmenuDao.deleteById(sysmenu);
        resData.setData("deleted", deleted == 1 ? true : false);
        log.info("###[服务] 完成删除菜单权限，ResultData=[{}]", resData);
        return resData;
    }

    @Override
    public Set<String> selectMenuPermsByUserId(Long userId) {
        List<String> perms = sysmenuDao.selectMenuPermsByUserId(userId);
        Set<String> permsSet = new HashSet<>();
        for (String perm : perms) {
            if (StringUtils.isNotEmpty(perm)) {
                permsSet.addAll(Arrays.asList(perm.trim().split(",")));
            }
        }
        return permsSet;
    }

    @Override
    public List<SysMenu> selectMenuTreeByUserId(Long userId) {

        List<SysMenu> menus = null;
        if (SecurityUtils.isAdmin(userId)) {
            menus = sysmenuDao.selectMenuTreeAll();
        } else {
            menus = sysmenuDao.selectMenuTreeByUserId(userId);
        }
        return getChildPerms(menus, 0);

    }

    /**
     * 构建前端路由所需要的菜单
     *
     * @param menus 菜单列表
     * @return 路由列表
     */
    @Override
    public List<RouterVo> buildMenus(List<SysMenu> menus) {
        List<RouterVo> routers = new LinkedList<RouterVo>();
        for (SysMenu menu : menus) {
            RouterVo router = new RouterVo();
            router.setHidden("1".equals(menu.getVisible()));
            router.setName(getRouteName(menu));
            router.setPath(getRouterPath(menu));
            router.setComponent(getComponent(menu));
            router.setMeta(new MetaVo(menu.getMenuname(), menu.getIcon()));
            List<SysMenu> cMenus = menu.getChildren();
            if (!cMenus.isEmpty() && cMenus.size() > 0 && UserConstants.TYPE_DIR.equals(menu.getMenutype())) {
                router.setAlwaysShow(true);
                router.setRedirect("noRedirect");
                router.setChildren(buildMenus(cMenus));
            } else if (isMeunFrame(menu)) {
                List<RouterVo> childrenList = new ArrayList<RouterVo>();
                RouterVo children = new RouterVo();
                children.setPath(menu.getPath());
                children.setComponent(menu.getComponent());
                children.setName(StringUtils.capitalize(menu.getPath()));
                children.setMeta(new MetaVo(menu.getMenuname(), menu.getIcon()));
                childrenList.add(children);
                router.setChildren(childrenList);
            }
            routers.add(router);
        }
        return routers;
    }

    @Override
    public List<SysMenu> selectMenuList(Long userId) {

        return selectMenuList(new SysMenu(), userId);
    }

    @Override
    public List<SysMenu> selectMenuList(SysMenu menu, Long userId) {
        List<SysMenu> menuList = null;
        // 管理员显示所有菜单信息
        if (SysUser.isAdmin(userId)) {
            QueryWrapper<SysMenu> sysmenuWrapper = new QueryWrapper<>();
            sysmenuWrapper.setEntity(menu);
            menuList = sysmenuDao.selectList(sysmenuWrapper);
        } else {
            menu.getParams().put("userid", userId);
            menuList = sysmenuDao.selectMenuListByUserId(menu);
        }
        return menuList;
    }

    @Override
    public ResultData buildMenuTreeSelect(List<SysMenu> menus) {
        log.debug("###[服务] 开始构建前端所需要树结构,", menus);
        ResultData resData = ResultData.init();
        List<SysMenu> menuTrees = buildMenuTree(menus);
        resData.setData("menuTrees", menuTrees.stream().map(TreeSelect::new).collect(Collectors.toList()));
        log.info("###[服务] 完成构建前端所需要树结构，ResultData=[{}]", resData);
        return resData;
    }

    /**
     * 构建前端所需要树结构
     *
     * @param menus 菜单列表
     * @return 树结构列表
     */
    @Override
    public List<SysMenu> buildMenuTree(List<SysMenu> menus) {
        log.debug("###[服务] 开始构建前端所需要树结构,menus=[{}]", menus);
        List<SysMenu> returnList = new ArrayList<SysMenu>();
        for (Iterator<SysMenu> iterator = menus.iterator(); iterator.hasNext(); ) {
            SysMenu t = (SysMenu) iterator.next();
            // 根据传入的某个父节点ID,遍历该父节点的所有子节点
            if (t.getParentid() == 0) {
                recursionFn(menus, t);
                returnList.add(t);
            }
        }
        if (returnList.isEmpty()) {
            returnList = menus;
        }
        log.info("###[服务] 完成构建前端所需要树结构，returnList=[{}]", returnList);
        return returnList;
    }

    @Override
    public List<Integer> selectMenuListByRoleId(Long roleId) {
        log.debug("###[服务] 开始根据角色ID查询菜单树信息,roleId=[{}]", roleId);
        List<Integer> integers = sysmenuDao.selectMenuListByRoleId(roleId);
        log.info("###[服务] 完成根据角色ID查询菜单树信息，integers=[{}]", integers);
        return integers;
    }


    //--------------------- 内部方法--------------------------

    /**
     * 获取组件信息
     *
     * @param menu 菜单信息
     * @return 组件信息
     */
    public String getComponent(SysMenu menu) {
        String component = UserConstants.LAYOUT;
        if (StringUtils.isNotEmpty(menu.getComponent()) && !isMeunFrame(menu)) {
            component = menu.getComponent();
        }
        return component;
    }

    /**
     * 根据父节点的ID获取所有子节点
     *
     * @param list     分类表
     * @param parentId 传入的父节点ID
     * @return String
     */
    public List<SysMenu> getChildPerms(List<SysMenu> list, int parentId) {

        List<SysMenu> returnList = new ArrayList<SysMenu>();
        for (Iterator<SysMenu> iterator = list.iterator(); iterator.hasNext(); ) {
            SysMenu t = (SysMenu) iterator.next();
            // 一、根据传入的某个父节点ID,遍历该父节点的所有子节点
            if (t.getParentid() == parentId) {
                recursionFn(list, t);
                returnList.add(t);
            }
        }
        return returnList;
    }

    /**
     * 递归列表
     *
     * @param list
     * @param t
     */
    private void recursionFn(List<SysMenu> list, SysMenu t) {
        // 得到子节点列表
        List<SysMenu> childList = getChildList(list, t);
        t.setChildren(childList);
        for (SysMenu tChild : childList) {
            if (hasChild(list, tChild)) {
                // 判断是否有子节点
                Iterator<SysMenu> it = childList.iterator();
                while (it.hasNext()) {
                    SysMenu n = (SysMenu) it.next();
                    recursionFn(list, n);
                }
            }
        }
    }

    /**
     * 得到子节点列表
     */
    private List<SysMenu> getChildList(List<SysMenu> list, SysMenu t) {
        List<SysMenu> tlist = new ArrayList<SysMenu>();
        Iterator<SysMenu> it = list.iterator();
        while (it.hasNext()) {
            SysMenu n = (SysMenu) it.next();
            if (n.getParentid().longValue() == t.getMenuid().longValue()) {
                tlist.add(n);
            }
        }
        return tlist;
    }

    /**
     * 判断是否有子节点
     */
    private boolean hasChild(List<SysMenu> list, SysMenu t) {
        return getChildList(list, t).size() > 0 ? true : false;
    }

    /**
     * 是否为菜单内部跳转
     *
     * @param menu 菜单信息
     * @return 结果
     */
    public boolean isMeunFrame(SysMenu menu) {
        return menu.getParentid().intValue() == 0 && UserConstants.TYPE_MENU.equals(menu.getMenutype())
                && menu.getIsframe().equals(UserConstants.NO_FRAME);
    }

    /**
     * 获取路由名称
     *
     * @param menu 菜单信息
     * @return 路由名称
     */
    public String getRouteName(SysMenu menu) {
        String routerName = StringUtils.capitalize(menu.getPath());
        // 非外链并且是一级目录（类型为目录）
        if (isMeunFrame(menu)) {
            routerName = StringUtils.EMPTY;
        }
        return routerName;
    }

    /**
     * 获取路由地址
     *
     * @param menu 菜单信息
     * @return 路由地址
     */
    public String getRouterPath(SysMenu menu) {
        String routerPath = menu.getPath();
        // 非外链并且是一级目录（类型为目录）
        if (0 == menu.getParentid().intValue() && UserConstants.TYPE_DIR.equals(menu.getMenutype())
                && UserConstants.NO_FRAME.equals(menu.getIsframe())) {
            routerPath = "/" + menu.getPath();
        }
        // 非外链并且是一级目录（类型为菜单）
        else if (isMeunFrame(menu)) {
            routerPath = "/";
        }
        return routerPath;
    }


}
