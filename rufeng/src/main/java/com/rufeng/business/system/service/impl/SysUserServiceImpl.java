package com.rufeng.business.system.service.impl;


import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import com.rufeng.business.system.domain.po.*;
import com.rufeng.business.system.mapper.*;
import com.rufeng.core.framework.config.RuFengfConfig;
import com.rufeng.core.framework.exception.CustomException;
import com.rufeng.core.utils.SecurityUtils;
import com.rufeng.core.utils.StringUtils;
import com.rufeng.core.utils.file.FileUtils;
import org.apache.commons.fileupload.UploadContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.FactoryBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.convert.EntityWriter;
import org.springframework.stereotype.Service;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;

import com.rufeng.core.framework.db.Pager;
import com.rufeng.core.framework.web.ResultData;
import com.rufeng.business.system.service.ISysUserService;

import javax.servlet.http.HttpServletResponse;


/**
 * 用户信息 服务接口实现
 *
 * @version v1.0.0
 * @since jdk1.8+
 */
@Service
public class SysUserServiceImpl extends ServiceImpl<ISysUserDao, SysUser> implements ISysUserService {
    private Logger log = LoggerFactory.getLogger(SysUserServiceImpl.class);

    @Autowired
    private ISysUserDao sysuserDao;
    @Autowired
    private ISysUserPostDao sysUserPostDao;
    @Autowired
    private ISysUserRoleDao sysUserRoleDao;
    @Autowired
    private ISysRoleDao sysRoleDao;
    @Autowired
    private ISysPostDao sysPostDao;

    @Override
    public ResultData get(String userid) throws Exception {
        log.debug("###[服务] 开始查询用户信息 userid=[{}]. ", userid);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();
        SysUser sysuser = sysuserDao.selectById(userid);
        resData.setData("sysuser", sysuser);
        log.info("###[服务] 完成查询用户信息 ResultData=[{}]", resData);
        return resData;
    }

    @Override
    public ResultData find(SysUser sysuser) throws Exception {
        log.debug("###[服务] 开始根据条件{}查询用户信息", sysuser);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();
        QueryWrapper<SysUser> sysuserWrapper = new QueryWrapper<>();
        sysuserWrapper.setEntity(sysuser);
        List<SysUser> sysusers = sysuserDao.selectList(sysuserWrapper);
        resData.setData("sysusers", sysusers);
        log.info("###[服务] 完成查询用户信息 ResultData=[{}]", resData);
        return resData;
    }

    @Override
    public ResultData listPager(SysUser sysuser, Pager page) throws Exception {
        log.debug("###[服务] 开始根据条件{}分页查询用户信息", sysuser);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();
        Page<SysUser> pageParam = new Page<>(page.getCurrentPage(), page.getTotalSize());
        // 当前页码，每页条数
        QueryWrapper<SysUser> sysuserWrapper = new QueryWrapper<>();
        sysuserWrapper.setEntity(sysuser);

        IPage<SysUser> pu = sysuserDao.selectByPage(pageParam, sysuser);

        resData.setData("userlist", pu);
        log.info("###[服务] 完成分页查询用户信息 resData=[{}]", resData);
        return resData;
    }

    @Override
    public ResultData add(SysUser sysuser) throws Exception {
        log.debug("###[服务] 开始添加新用户信息, {}", sysuser);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();
        sysuser.setPassword(SecurityUtils.encryptPassword(sysuser.getPassword()));
        int inserted = sysuserDao.insert(sysuser);
        // 新增用户岗位关联
        insertUserPost(sysuser);
        // 新增用户与角色管理
        insertUserRole(sysuser);
        resData.setData("inserted", inserted);
        log.info("###[服务] 完成添加新用户信息，ResultData=[{}]", resData);
        return resData;
    }

    @Override
    public ResultData update(SysUser sysuser) throws Exception {
        log.debug("###[服务] 开始根据条件{}修改用户信息,", sysuser);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();
        Long userId = sysuser.getUserid();
        // 删除用户与角色关联
        Map<String, Object> urColumnMap = new HashMap<>();
        urColumnMap.put("userid", userId);
        sysUserRoleDao.deleteByMap(urColumnMap);
        // 新增用户与角色管理
        insertUserRole(sysuser);
        // 删除用户与岗位关联
        Map<String, Object> upColumnMap = new HashMap<>();
        upColumnMap.put("userid", userId);
        sysUserPostDao.deleteByMap(upColumnMap);
        // 新增用户与岗位管理
        insertUserPost(sysuser);
        int updated = sysuserDao.updateById(sysuser);
        resData.setData("updated", updated == 1 ? true : false);
        log.info("###[服务] 完成修改用户信息，ResultData=[{}]", resData);
        return resData;
    }

    @Override
    public ResultData delete(String userid) throws Exception {
        log.debug("###[服务] 开始根据条件{}删除用户信息,", userid);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();
        SysUser sysuser = new SysUser();
        sysuser.setUserid(Long.valueOf(userid));
        int deleted = sysuserDao.deleteById(sysuser);
        resData.setData("deleted", deleted == 1 ? true : false);
        log.info("###[服务] 完成删除用户信息，ResultData=[{}]", resData);
        return resData;
    }

    @Override
    public SysUser selectUserByUserName(String username) {
        return sysuserDao.selectUserByUserName(username);
    }

    @Override
    public void checkUserAllowed(SysUser user) {
        if (StringUtils.isNotNull(user.getUserid()) && user.isAdmin()) {
            throw new CustomException("不允许操作超级管理员用户");
        }
    }

    @Override
    public ResultData updateUserStatus(SysUser sysuser) {
        log.debug("###[服务] 开始根据条件{}修改用户状态,", sysuser);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();
        int updated = sysuserDao.updateById(sysuser);
        resData.setData("updated", updated == 1 ? true : false);
        log.info("###[服务] 完成修改用户状态，ResultData=[{}]", resData);
        return resData;
    }

    @Override
    public ResultData resetPwd(SysUser sysuser) {
        log.debug("###[服务] 开始根据重置用户密码,", sysuser);
        ResultData resData = ResultData.init();
        int updated = sysuserDao.updateById(sysuser);
        resData.setData("updated", updated == 1 ? true : false);
        log.info("###[服务] 完成修改用户状态，ResultData=[{}]", resData);
        return resData;
    }

    @Override
    public ResultData resetUserPwd(String userName, String password) {
        log.debug("###[服务] 开始根据重置用户密码,userName=[{}]. ", userName);
        ResultData resData = ResultData.init();
        SysUser sysUser = new SysUser();
        sysUser.setPassword(password);
        UpdateWrapper<SysUser> uw = new UpdateWrapper<>();
        uw.eq("username", userName);
        int updated = sysuserDao.update(sysUser, uw);
        resData.setData("updated", updated == 1 ? true : false);
        log.info("###[服务] 完成修改用户状态，ResultData=[{}]", resData);
        return resData;
    }

    @Override
    public SysUser selectUserById(Long userId) {
        log.debug("###[服务] 开始根据用户查询用户信息,userId=[{}]. ", userId);
        return sysuserDao.selectUserById(userId);
    }

    @Override
    public String selectUserRoleGroup(String userName) {
        List<SysRole> list = sysRoleDao.selectRolesByUserName(userName);
        StringBuffer idsStr = new StringBuffer();
        for (SysRole role : list) {
            idsStr.append(role.getRolename()).append(",");
        }
        if (StringUtils.isNotEmpty(idsStr.toString())) {
            return idsStr.substring(0, idsStr.length() - 1);
        }
        return idsStr.toString();
    }

    @Override
    public String selectUserPostGroup(String userName) {
        log.debug("###[服务] 开始根据用户名称查询用户所属岗位组,userName=[{}]. ", userName);
        List<SysPost> list = sysPostDao.selectPostsByUserName(userName);
        StringBuffer idsStr = new StringBuffer();
        for (SysPost post : list) {
            idsStr.append(post.getPostname()).append(",");
        }
        if (StringUtils.isNotEmpty(idsStr.toString())) {
            return idsStr.substring(0, idsStr.length() - 1);
        }
        log.info("###[服务] 完成根据用户名称查询用户所属岗位组，idsStr=[{}]", idsStr.toString());
        return idsStr.toString();
    }

    @Override
    public boolean updateUserAvatar(String username, String avatar) {
        log.debug("###[服务] 开始根据用户名称修改头像地址,username=[{}]. ", username);
        SysUser sysUser = new SysUser();
        sysUser.setAvatar(avatar);
        UpdateWrapper<SysUser> uw = new UpdateWrapper<>();
        uw.eq("username", username);
        int update = sysuserDao.update(sysUser, uw);
        log.info("###[服务] 完成根据用户名称修改头像地址，update=[{}]", update);
        return update > 0 ? true : false;
    }

    @Override
    public void userAvatar(Long userid, HttpServletResponse response) {
        SysUser sysUser = sysuserDao.selectUserById(userid);
        OutputStream out = null;
        try {
            response.setContentType("image/png");
            out = response.getOutputStream();
           String filepath =  RuFengfConfig.getProfile() + sysUser.getAvatar();
            FileUtils.writeBytes(filepath, out);
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


    /**
     * 新增用户岗位信息
     *
     * @param user 用户对象
     */
    public void insertUserPost(SysUser user) {
        Long[] posts = user.getPostIds();
        if (StringUtils.isNotNull(posts)) {
            // 新增用户与岗位管理
            List<SysUserPost> list = new ArrayList<SysUserPost>();
            for (Long postId : posts) {
                SysUserPost up = new SysUserPost();
                up.setUserid(user.getUserid());
                up.setPostid(postId);
                list.add(up);
            }
            if (list.size() > 0) {
                sysUserPostDao.batchUserPost(list);
            }
        }
    }

    /**
     * 新增用户角色信息
     *
     * @param user 用户对象
     */
    public void insertUserRole(SysUser user) {
        Long[] roles = user.getRoleIds();
        if (StringUtils.isNotNull(roles)) {
            // 新增用户与角色管理
            List<SysUserRole> list = new ArrayList<SysUserRole>();
            for (Long roleId : roles) {
                SysUserRole ur = new SysUserRole();
                ur.setUserid(user.getUserid());
                ur.setRoleid(roleId);
                list.add(ur);
            }
            if (list.size() > 0) {
                sysUserRoleDao.batchUserRole(list);
            }
        }
    }
}
