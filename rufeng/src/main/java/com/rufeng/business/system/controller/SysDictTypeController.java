package com.rufeng.business.system.controller;


import com.rufeng.business.system.domain.po.SysDictType;
import com.rufeng.business.system.service.ISysDictTypeService;
import com.rufeng.core.framework.aspectj.lang.annotation.Log;
import com.rufeng.core.framework.aspectj.lang.enums.BusinessType;
import com.rufeng.core.framework.web.ResultData;
import com.rufeng.core.framework.db.Pager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;


/**
 * 字典类型控制器
 *
 * @version v1.0.0
 * @since jdk1.8+
 */
@RestController
@RequestMapping("/system/dict/type")
public class SysDictTypeController {
    private Logger log = LoggerFactory.getLogger(SysDictTypeController.class);

    @Autowired
    private ISysDictTypeService sysdicttypeService;

    /**
     * 获取字典类型
     *
     * @param dict_id 字典主键
     * @return ResultData
     */
    @Log(title = "获取字典类型", businessType = BusinessType.OTHER)
    @RequestMapping(value = "/get/{dict_id}", method = {RequestMethod.GET})
    public ResultData get(@PathVariable String dict_id) throws Exception {
        log.debug("###开始查询字典类型， dict_id=[{}].", dict_id);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        return sysdicttypeService.get(dict_id);
    }

    /**
     * 查询字典类型
     *
     * @param sysdicttype 字典类型对象
     * @return ResultData
     */
    @RequestMapping(value = "/list", method = {RequestMethod.GET})
    public ResultData list(SysDictType sysdicttype) throws Exception {
        log.debug("###开始根据条件{}查询字典类型", sysdicttype);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        return sysdicttypeService.list(sysdicttype);
    }


    /**
     * 分页查询字典类型
     *
     * @param page        分页对象
     * @param sysdicttype 字典类型对象
     * @return ResultData
     */
    @RequestMapping(value = "/list-by-page", method = {RequestMethod.GET})
    public ResultData listPager(SysDictType sysdicttype, Pager page) throws Exception {
        log.debug("###开始根据条件{}分页查询字典类型", sysdicttype);
        return sysdicttypeService.listPager(sysdicttype, page);
    }

    /**
     * 添加字典类型
     *
     * @param sysdicttype 字典类型对象
     * @return ResultData
     */
    @Log(title = "添加字典类型", businessType = BusinessType.INSERT)
    @RequestMapping(value = "/add", method = {RequestMethod.POST})
    public ResultData add(@RequestBody SysDictType sysdicttype) throws Exception {
        log.debug("###开始查找添加字典类型， [{}]", sysdicttype);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        return sysdicttypeService.add(sysdicttype);
    }

    /**
     * 更新字典类型
     *
     * @param sysdicttype 字典类型对象
     * @return ResultData
     */
    @Log(title = "添加字典类型", businessType = BusinessType.UPDATE)
    @RequestMapping(value = "/update", method = {RequestMethod.PUT})
    public ResultData update(@RequestBody SysDictType sysdicttype) throws Exception {
        log.debug("###开始修改字典类型， [{}]", sysdicttype);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        return sysdicttypeService.update(sysdicttype);
    }

    /**
     * 删除字典类型
     *
     * @param dict_id 字典主键
     * @return ResultData
     */
    @Log(title = "添加字典类型", businessType = BusinessType.DELETE)
    @RequestMapping(value = "/delete/{dict_id}", method = {RequestMethod.DELETE})
    public ResultData delete(@PathVariable String dict_id) throws Exception {
        log.debug("###开始删除字典类型对象，dict_id={}.", dict_id);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        return sysdicttypeService.delete(dict_id);
    }


    /**
     * 清空缓存
     */
    @RequestMapping(value = "/clearCache", method = RequestMethod.DELETE)
    public ResultData clearCache() {
        log.debug("###开始清空缓存");
        return sysdicttypeService.clearCache();
    }

}