package com.rufeng.business.system.service.impl;


import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.stream.Collectors;

import com.rufeng.core.framework.web.domain.TreeSelect;
import com.rufeng.core.utils.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;

import com.rufeng.core.framework.db.Pager;
import com.rufeng.core.framework.web.ResultData;
import com.rufeng.business.system.service.ISysDeptService;
import com.rufeng.business.system.mapper.ISysDeptDao;
import com.rufeng.business.system.domain.po.SysDept;


/**
 * 部门 服务接口实现
 *
 * @version v1.0.0
 * @since jdk1.8+
 */
@Service
public class SysDeptServiceImpl implements ISysDeptService {
    private Logger log = LoggerFactory.getLogger(SysDeptServiceImpl.class);

    @Autowired
    private ISysDeptDao sysdeptDao;

    @Override
    public ResultData get(String deptid) throws Exception {
        log.debug("###[服务] 开始查询部门 deptid=[{}]. ", deptid);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();
        SysDept sysdept = sysdeptDao.selectById(deptid);
        resData.setData("sysdept", sysdept);
        log.info("###[服务] 完成查询部门 ResultData=[{}]", resData);
        return resData;
    }

    @Override
    public ResultData list(SysDept sysdept) throws Exception {
        log.debug("###[服务] 开始根据条件{}查询部门", sysdept);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();
        QueryWrapper<SysDept> sysdeptWrapper = new QueryWrapper<>();
        sysdeptWrapper.setEntity(sysdept);
        List<SysDept> sysdepts = sysdeptDao.selectList(sysdeptWrapper);
        resData.setData("sysdepts", sysdepts);
        log.info("###[服务] 完成查询部门 ResultData=[{}]", resData);
        return resData;
    }

    @Override
    public ResultData listPager(SysDept sysdept, Pager page) throws Exception {
        log.debug("###[服务] 开始根据条件{}分页查询部门", sysdept);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();
        Page<SysDept> pageParam = new Page<>(page.getCurrentPage(), page.getTotalSize()); // 当前页码，每页条数
        QueryWrapper<SysDept> sysdeptWrapper = new QueryWrapper<>();
        sysdeptWrapper.setEntity(sysdept);
        IPage<SysDept> pu = sysdeptDao.selectPage(pageParam, sysdeptWrapper);
        resData.setData("data", pu);

        log.info("###[服务] 完成分页查询部门 resData=[{}]", resData);
        return resData;
    }

    @Override
    public ResultData add(SysDept sysdept) throws Exception {
        log.debug("###[服务] 开始添加新部门, {}", sysdept);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();
        int inserted = sysdeptDao.insert(sysdept);
        resData.setData("inserted", inserted);
        log.info("###[服务] 完成添加新部门，ResultData=[{}]", resData);
        return resData;
    }

    @Override
    public ResultData update(SysDept sysdept) throws Exception {
        log.debug("###[服务] 开始根据条件{}修改部门,", sysdept);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();
        int updated = sysdeptDao.updateById(sysdept);
        resData.setData("updated", updated);
        log.info("###[服务] 完成修改部门，ResultData=[{}]", resData);
        return resData;
    }

    @Override
    public ResultData delete(String deptid) throws Exception {
        log.debug("###[服务] 开始根据条件{}删除部门,", deptid);
        //These code is generated by machine, if you want to modify the code, suggest you to remove this line
        ResultData resData = ResultData.init();
        SysDept sysdept = new SysDept();
        sysdept.setDeptid(Long.valueOf(deptid));
        int deleted = sysdeptDao.deleteById(sysdept);
        resData.setData("deleted", deleted);
        log.info("###[服务] 完成删除部门，ResultData=[{}]", resData);
        return resData;
    }

    @Override
    public List<SysDept> selectDeptList(SysDept dept) {
        log.debug("###[服务] 开始根据条件{}获取部门下拉树列表,", dept);
        List<SysDept> depts = sysdeptDao.selectDeptList(dept);
        log.info("###[服务] 完成获取部门下拉树列表，depts=[{}]", depts);
        return depts;
    }

    @Override
    public ResultData buildDeptTreeSelect(List<SysDept> sysDepts) {
        log.debug("###[服务] 开始根据条件{}构建部门树列表,", sysDepts);
        ResultData resData = ResultData.init();
        List<SysDept> deptTrees = buildDeptTree(sysDepts);
        resData.setData("deptTrees", deptTrees.stream().map(TreeSelect::new).collect(Collectors.toList()));
        log.info("###[服务] 完成构建部门树列表，ResultData=[{}]", resData);
        return resData;
    }

    /**
     * 构建前端所需要树结构
     *
     * @param depts 部门列表
     * @return 树结构列表
     */
    @Override
    public List<SysDept> buildDeptTree(List<SysDept> depts) {
        List<SysDept> returnList = new ArrayList<>();
        List<Long> tempList = new ArrayList<>();
        for (SysDept dept : depts) {
            tempList.add(dept.getDeptid());
        }
        int i = 0;
        for (Iterator<SysDept> iterator = depts.iterator(); iterator.hasNext(); ) {
            System.out.println(i++);
            SysDept dept = (SysDept) iterator.next();
            // 如果是顶级节点, 遍历该父节点的所有子节点
            if (!tempList.contains(dept.getParentid())) {
                recursionFn(depts, dept);
                returnList.add(dept);
            }
        }
        if (returnList.isEmpty()) {
            returnList = depts;
        }
        return returnList;
    }

    /**
     * 递归列表
     */
    private void recursionFn(List<SysDept> list, SysDept t) {
        // 得到子节点列表
        List<SysDept> childList = getChildList(list, t);
        t.setChildren(childList);
        for (SysDept tChild : childList) {
            if (hasChild(list, tChild)) {
                // 判断是否有子节点
                Iterator<SysDept> it = childList.iterator();
                while (it.hasNext()) {
                    SysDept n = (SysDept) it.next();
                    recursionFn(list, n);
                }
            }
        }
    }

    /**
     * 得到子节点列表
     */
    private List<SysDept> getChildList(List<SysDept> list, SysDept t) {
        List<SysDept> tlist = new ArrayList<SysDept>();
        Iterator<SysDept> it = list.iterator();
        while (it.hasNext()) {
            SysDept n = (SysDept) it.next();
            if (StringUtils.isNotNull(n.getParentid()) && n.getParentid().longValue() == t.getDeptid().longValue()) {
                tlist.add(n);
            }
        }
        return tlist;
    }

    /**
     * 判断是否有子节点
     */
    private boolean hasChild(List<SysDept> list, SysDept t) {
        return getChildList(list, t).size() > 0 ? true : false;
    }
}

